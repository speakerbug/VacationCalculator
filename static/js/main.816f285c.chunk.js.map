{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","calculate","total","state","rate","used","earned","available","unaccrued","remaining","setState","myChangeHandler","event","nam","target","name","val","value","className","type","onChange","this","toFixed","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQAkGeA,G,kBA9Fb,aAAe,IAAD,8BACZ,+CAWFC,UAAY,WACV,IAAIC,EAAwB,GAAhB,EAAKC,MAAMC,KACnBC,EAAO,EAAKF,MAAMG,OAAO,EAAKH,MAAMI,UACpCC,EAAYN,EAAM,EAAKC,MAAMI,UAAUF,EACvCI,EAAYP,EAAMG,EACtB,EAAKK,SAAS,CAACR,MAAOA,EAAOG,KAAMA,EAAMG,UAAWA,EAAWC,UAAWA,KAjB9D,EAmBdE,gBAAkB,SAACC,GACjB,IAAIC,EAAMD,EAAME,OAAOC,KACnBC,EAAMJ,EAAME,OAAOG,MAEvB,EAAKP,SAAL,eAAgBG,EAAMG,GAAM,EAAKf,YArBjC,EAAKE,MAAQ,CACXG,OAAQ,EACRC,UAAW,EACXH,KAAM,EACNF,MAAO,EACPG,KAAM,EACNG,UAAW,EACXC,UAAW,GATD,E,sEA0BZ,OACA,yBAAKS,UAAU,aACb,yBAAKA,UAAU,OACf,yBAAKA,UAAU,SACf,0BAAMA,UAAU,mBACpB,yBAAKA,UAAU,cACb,2BAAOA,UAAU,0BAAjB,uBACA,yBAAKA,UAAU,YACb,2BAAOC,KAAK,SAASJ,KAAK,SAASK,SAAUC,KAAKV,gBAAiBO,UAAU,mBAIjF,yBAAKA,UAAU,cACb,2BAAOA,UAAU,0BAAjB,0BACA,yBAAKA,UAAU,YACb,2BAAOC,KAAK,SAASJ,KAAK,YAAYK,SAAUC,KAAKV,gBAAiBO,UAAU,mBAIpF,yBAAKA,UAAU,cACb,2BAAOA,UAAU,0BAAjB,6BACA,yBAAKA,UAAU,YACb,2BAAOC,KAAK,SAASJ,KAAK,OAAOK,SAAUC,KAAKV,gBAAiBO,UAAU,qBAK/E,yBAAKA,UAAU,SAEf,kDACA,2BAAOA,UAAU,sCACf,+BACE,4BACE,6BACA,qCACA,sCAGJ,+BACE,4BACE,8CACA,4BAAMG,KAAKlB,MAAMD,MAAOoB,QAAQ,IAChC,6BAAMD,KAAKlB,MAAMD,MAAM,GAAGoB,QAAQ,KAEpC,4BACE,6CACA,4BAAMD,KAAKlB,MAAME,KAAMiB,QAAQ,IAC/B,6BAAMD,KAAKlB,MAAME,KAAK,GAAGiB,QAAQ,KAEnC,4BACE,kDACA,4BAAMD,KAAKlB,MAAMK,UAAWc,QAAQ,IACpC,6BAAMD,KAAKlB,MAAMK,UAAU,GAAGc,QAAQ,KAExC,wBAAIJ,UAAU,iBACZ,kDACA,4BAAMG,KAAKlB,MAAMM,UAAWa,QAAQ,IACpC,6BAAMD,KAAKlB,MAAMM,UAAU,GAAGa,QAAQ,c,GApF5BC,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.816f285c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      earned: 0,\n      available: 0,\n      rate: 0,\n      total: 0,\n      used: 0,\n      unaccrued: 0,\n      remaining: 0\n    };\n  }\n  calculate = () => {\n    let total = this.state.rate*26;\n    let used = this.state.earned-this.state.available;\n    let unaccrued = total-this.state.available-used;\n    let remaining = total-used;\n    this.setState({total: total, used: used, unaccrued: unaccrued, remaining: remaining});\n  }\n  myChangeHandler = (event) => {\n    let nam = event.target.name;\n    let val = event.target.value;\n    // Set the value and then calculate new vacation day values as a callback function\n    this.setState({[nam]: val}, this.calculate);\n  }\n  render() {\n    return (\n    <div className=\"container\">\n      <div className=\"row\">\n      <div className=\"col-4\">\n      <form className=\"form-horizontal\">\n  <div className=\"form-group\">\n    <label className=\"control-label col-sm-7\">1. Vacation Earned:</label>\n    <div className=\"col-sm-5\">\n      <input type=\"number\" name=\"earned\" onChange={this.myChangeHandler} className=\"form-control\" />\n    </div>\n  </div>\n\n  <div className=\"form-group\">\n    <label className=\"control-label col-sm-7\">2. Vacation Available:</label>\n    <div className=\"col-sm-5\">\n      <input type=\"number\" name=\"available\" onChange={this.myChangeHandler} className=\"form-control\" />\n    </div>\n  </div>\n\n  <div className=\"form-group\">\n    <label className=\"control-label col-sm-7\">3. Vacation Accrual Rate:</label>\n    <div className=\"col-sm-5\">\n      <input type=\"number\" name=\"rate\" onChange={this.myChangeHandler} className=\"form-control\" />\n    </div>\n  </div>\n      </form>\n      </div>\n  <div className=\"col-8\">\n\n  <h2>Vacation Breakdown</h2>         \n  <table className=\"table table-bordered table-striped\">\n    <thead>\n      <tr>\n        <th></th>\n        <th>Hours</th>\n        <th>Days</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Total Vacation</td>\n        <td>{(this.state.total).toFixed(2)}</td>\n        <td>{(this.state.total/8).toFixed(0)}</td>\n      </tr>\n      <tr>\n        <td>Vacation Used</td>\n        <td>{(this.state.used).toFixed(2)}</td>\n        <td>{(this.state.used/8).toFixed(0)}</td>\n      </tr>\n      <tr>\n        <td>Vacation Unaccrued</td>\n        <td>{(this.state.unaccrued).toFixed(2)}</td>\n        <td>{(this.state.unaccrued/8).toFixed(0)}</td>\n      </tr>\n      <tr className=\"table-success\">\n        <td>Remaining Vacation</td>\n        <td>{(this.state.remaining).toFixed(2)}</td>\n        <td>{(this.state.remaining/8).toFixed(0)}</td>\n      </tr>\n    </tbody>\n  </table>\n  </div>\n  </div>\n    </div>\n    );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}